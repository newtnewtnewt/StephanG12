<!----- Conversion time: 7.527 seconds.


Using this Markdown file:

1. Cut and paste this output into your source file.
2. See the notes and action items below regarding this conversion run.
3. Check the rendered output (headings, lists, code blocks, tables) for proper
   formatting and use a linkchecker before you publish this page.

Conversion notes:

* Docs to Markdown version 1.0β17
* Sat May 04 2019 12:37:17 GMT-0700 (PDT)
* Source doc: https://docs.google.com/a/miamioh.edu/open?id=1NYW6YHkX_RVki6TbykNzwo8ma88iztTIv8Zhn7m9JXI
* This document has images: check for >>>>>  gd2md-html alert:  inline image link in generated source and store images to your server.
----->


<p style="color: red; font-weight: bold">>>>>>  gd2md-html alert:  ERRORs: 0; WARNINGs: 0; ALERTS: 1.</p>
<ul style="color: red; font-weight: bold"><li>See top comment block for details on ERRORs and WARNINGs. <li>In the converted Markdown or HTML, search for inline alerts that start with >>>>>  gd2md-html alert:  for specific instances that need correction.</ul>

<p style="color: red; font-weight: bold">Links to alert messages:</p><a href="#gdcalert1">alert1</a>

<p style="color: red; font-weight: bold">>>>>> PLEASE check and correct alert issues and delete this message and the inline alerts.<hr></p>




*   **Show your customer all the things mentioned in [First Week Deliverables](https://miamioh.instructure.com/courses/89448/assignments/909356)**

    **_First week deliverables_**


    **Define a project manager (primary communication with client, iteration planning, task assignment/division)**


_Pushti Mody_


    _A project manager will be responsible to have primary communication with clients and also perfect communicating channel within the team. Along with that iteration planning making sure project is going exactly the way customer wants and customer is happy. Also assigning tasks will be done and making sure that the work is getting done at a good rate and it fulfills customers requirements or not._


    **Define a technical manager (manage task board technology, architectural design/technology solutions)**

_Keegan Moore_


    _A technical manager will be managing task board  on trello, making sure that we are all updated with the usage of the technology. Along with managing technical side technical manager will look into developing side too along with managing the architectural and technological solutions,_

**Name your Application**

_Appregate_


    **Name your Software Development Company**

_Percussive Maintenance_


    **Fill out scheduling google form - [https://goo.gl/forms/f1tWYKX5IN8azUg92 (Links to an external site.)Links to an external site. (Links to an external site.)Links to an external site.](https://goo.gl/forms/f1tWYKX5IN8azUg92)**

_Filled!_

_Every monday from 6:30pm - 7:00pm_

 


    **Who : Customer - Mike **


    **Admin , Moderator & User : other people (By Whom)**


    **Gather at least 10 requirements by yourself (customer validation will come next week) based on document (Where, what, why and by whom)**



1. Submit application request -application request will be submitted by the customer 
2. Accept/Reject requests - Once the request received it can be accepted or rejected 
3. View requests - Request should be viewable 
4. Save application data - application data should be viewable and saved
5. View applications - viewable applications 
6. Sort applications - applications sorted so it is easy to access it. 
7. Filter applications - filter application with a priority.
8. Search applications - application can be accessed with a date/name
9. Add comment - comments can be added 
10. Delete comment - comments can be deleted 
11. User account creation - we can have a user creating account
12. User log in - user should be able to log in using username and password
13. Save login data - there will be an option that they can save their login data 

    **Choose a task board (virtual? portable?) and populate it with requirements. Let us know which one/send screenshot or link.**


_We are using_ **_Trello_** _as our task board. _[https://trello.com/invite/b/BmZur2m7/30dfda190ab4bbc7288c6c7cab00f96d/stephan-201-project (Links to an external site.)Links to an external site.](https://trello.com/invite/b/BmZur2m7/30dfda190ab4bbc7288c6c7cab00f96d/stephan-201-project)



*    Describe your roles to the customer

    **Project Manager - Pushti Mody**


    **Technical Manager - Kreegan Moore **


    **Data layer - Sara Grover**


    **Developer+tester - Noah Dunn **


    **Developer + tester - Craig Beuerlein**

*   Describe your team’s meeting schedule. When and what frequency? How many times per week will you be meeting?

    **We will be meeting once every week which will be wednesday 6:30 pm -7:00 pm.**

*   **Validate your 10 requirements with the customer. Let them change them. **
1. Submit application request - A user submits a request for an application, containing name, developers, and a comment
2. Accept/Reject requests - An admin can view a request, accept or reject it, and leave a comment
3. View requests - A user and admin should be able to see requests. An admin can see all requests, a user can only see their own.
4. Save application data - Whenever the program is launched, the information for each app is pulled from a SQL database
5. View applications - Any person can view the application list
6. Sort applications - Applications can be sorted by any of its variables
7. Filter applications - Any person can filter apps
8. Search applications - Any person can search apps with a keyword
9. Add comment - Any user can add a comment to an app, with a rating
10. Delete comment - An admin or a moderator can delete a comment, and remove its rating
11. User account creation - A non-user can create a user account, with a name and password
12. User log in - Any person can log into an account with proper credentials 
13. Save login data - Any person can check a “remember me” box, that will auto login if checked.
14.  . 
*   **Show initial UML Class diagrams for your requirements**
    *   

<p id="gdcalert1" ><span style="color: red; font-weight: bold">>>>>>  gd2md-html alert: inline image link here (to images/2nd-Week0.png). Store image on your image server and adjust path/filename if necessary. </span><br>(<a href="#">Back to top</a>)(<a href="#gdcalert2">Next alert</a>)<br><span style="color: red; font-weight: bold">>>>>> </span></p>


![alt_text](images/2nd-Week0.png "image_tooltip")

*   **Bluesky and elicit more/all requirements from your customer**

        Showing the customer all the requirements and bluesky according to the customer needs. 

*   **Begin and show evidence that you’ve put User Stories and Tasks for Iteration 1 on your board and assign them to your specific team members. **

    **[https://trello.com/b/BmZur2m7/stephan-201-project](https://trello.com/b/BmZur2m7/stephan-201-project)**

*   **Show evidence that you have started setting up a code repository**

**[https://github.com/KeeganWM/StephanG12](https://github.com/KeeganWM/StephanG12)**

**	**

**We have our github all set, for our code repository. **

**_<span style="text-decoration:underline;">3rd Week Agenda</span>_**

**_Developers - Noah and Craig will be putting some code in the repository. _**

**_We will be meeting this wednesday and discuss more about our project._**

**_Have a running program, through skeleton/dummy objects - Developer _**

**_All the tasks will be marked clearly, each person will be assigned a task and along with that effort value(hours)_**

**_We will be identifying which requirements will not be worked on in the iteration 1._**

**_Burn - down chart will be created. And along with that we will pick one class and create a state diagram and it will be completed. _**

**_Github is already settled._**

**_ Agenda will be prepared for the meetings_**

**_And all our progress will be tracked. _**

**_Requirements: _**

**From this point forth, the customer is defined as Mike, the person buying this program.**

**The user is a standard, default user who has no special permissions. A person is assigned the role of user by default.**

**A moderator is defined as someone with a heightened level of privilege able to remove comments on applications in comment sections.**

**An admin is at a higher level of privilege than moderator and is allowed to confirm/deny applications as well as the cascading roles provided.**



*   A user/moderator/admin shall be able to download Appgregate
*   A user/moderator/admin shall be able to run the Appgregate without any initial permissions.
*   A user/moderator/admin shall be able to access a login page.
*   A user/moderator/admin shall be able to access a create new account page from a login page.
*   A user/moderator/admin shall be able to input a new username and password into textfields.
*   A user/moderator/admin shall be able to hit submit with their new username and password in textfields.
*   The information from the textfields should populate a SQL Table of all accounts.
*   A user/moderator/admin shall be able to input a username and password into textfields.
*   A user/moderator/admin shall be able to insert a username and password into two text boxes to login to an account.
*   A user/moderator/admin shall be able to hit submit with their username and password in textfields.
*   A user/moderator/admin shall be logged in once they submitted correct information in the login page.
*   A user/moderator/admin’s password shall be encrypted within a text file.
*   **A user/moderator/admin shall see the app store in the GUI without logging in, in an unsorted order upon booting the program.**
*   **A user/moderator/admin shall see text in the GUI without logging in  above each respective data entry with the corresponding column name for that data entry(I.E the “Name” will be displayed above the application name in the graphic interface)**
*   **A user/moderator/admin shall be able to view the name of the application on the GUI without logging in, in the row corresponding to the application.**
*   **A user/moderator/admin shall be able to view the description of the application on the GUI without logging in, in the row corresponding to the application.**
*   **A user/moderator/admin shall be able to view the respective organization of the application on the GUI without logging in  in the row corresponding to the application.**
*   **A user/moderator/admin shall be able to view the platform(s) of the application on the GUI without logging in, in the row corresponding to the application.**
*   **A user/moderator/admin shall be able to view the versions(s) of the application on the GUI without logging in, in the row corresponding to the application.**
*   A user/moderator/admin shall be able to view the out of 5 star rating of the application on the GUI without logging in, in the row corresponding to the application.
*   A user/moderator/admin shall be able to view a “view comments” button on the GUI without logging in, in the row corresponding to the application.
*   **A user/moderator/admin shall be able to view the application information in each row in the GUI according to the following order: name, description, organization, platform(s), version(s), out of 5 rating.**
*   A user/moderator/admin shall be able to single click on any column header in the GUI to sort that column in ascending order for all columns.
*   A user/moderator/admin shall be able to single click on any column header in the GUI for a list already sorted in ascending order to sort that list by that column in descending order.
*   A user/moderator/admin shall be able to double click any column header in the GUI, without logging in, for a search bar to appear.
*   A user/moderator/admin shall be able to type text on column headers in the GUI, without logging in,  that have been double clicked in order to filter by criteria respective of that column.
*   A user/moderator/admin shall have access in the GUI without login in to a search bar that can be clicked on in order to type words in.
*   A user/moderator/admin shall be able to filter across all columns based on the text present in the persistent search bar.
*   **A programmer shall institute a SQL table for storing all application information **
*   **A programmer shall institute a SQL table for storing all comments **
*   A programmer shall institute a foreign key in the application information table to link the application information table with the comment table
*   **A programmer shall have the GUI populate based on the information stored in the SQL database**
*   **A programmer shall generate all necessary application components using a J-Swing GUI.**
*   A user/moderator/admin shall be able to click a button to direct them to a submit application page while logged in
*   A user/moderator/admin shall be able to enter information into text boxes on an application page while logged in
*   A user/moderator/admin shall be able to submit an application request while logged in using the information present in the text boxes on the application page
*   A user/moderator/admin shall have a link in their application submission to the specific version of their app to be hosted on the store, while logged in on the application page. (which can be apple store, google play store )
*   A programmer shall store all application requests in a SQL table
*   An admin shall be able to hit a button directed them to an application request accept/deny page while logged in on the GUI
*   An admin shall be able to view all application requests in the order which they were submitted, including all details of the textfield submissions while logged in on the application request page
*   An admin shall be able to click accept and have a box/JSwing pane pop up with a text box for comments as well as a submit button while logged in on the application request page
*   An admin shall be able to leave a comment before hitting the submit button on the box pop up in the accept pane while logged in on the application request page.
*   The programmer shall write a SQL stored procedure that will add any accepted requests to the Application table
*   An admin shall be able to click reject and have a box/JSwing pane pop up with a text box for comments as well as a submit button while logged in on the application request page
*   An admin shall be able to leave a comment before hitting the submit button on the box pop up in the reject pane while logged in on the application request page.
*   The user/moderator/admin shall have an option to hit a button on the main GUI page to redirect towards a comments page while logged in.
*   The user/moderator/admin can view all comments they have posted or received in their comment page while logged in.
*   The user/moderator/admin can return to the home GUI from anywhere through a persistent home button on the bottom left hand part of the screen
*   A user/moderator/admin can hit “view comments” button on any of the application rows in the main GUI in order to be directed to a comments page
*   A user/moderator/admin can view all comments on the comments page without being logged in
*   A user/moderator/admin can fill a textbox with text while viewing a particular application to leave a comment
*   A user/moderator/admin can hit a submit button which will submit a comment based on the text in the textbox.
*   A user/moderator/admin will have a number of stars option under each textbox, corresponding with a comment while logged in on a comment page.
*   A user/moderator/admin will have a choice in stars ranging from 1 to 5 with the option of no rating. 
*   A programmer will store all comments and ratings together in SQL table
*   A moderator/admin shall be able to moderate a comment section (delete comments) for each included app on the comments page while logged in using a small button in the corner of each comment
*   A programmer shall store all user/moderator/admin login information in a SQL table

<!-- Docs to Markdown version 1.0β17 -->
